import Source;

model M = {
  subM: {}
};

model Class = {};

model useBeforeDefineModel = {
  m: MyModel,
  subModel: {
    useBeforeDefineModel: UseBeforeDefineModelOnSubModel
  }
};

model UseBeforeDefineModelOnSubModel = {
  m: MyModel,
}

model ComplexStruct {
  aa?: string(name='aa', description='aaa'),
  bb?: float(name='bb', description='b'),
  cc?: SimpleStruct(name='cc'),
  dd?: ComplexStruct(name='dd'),
  ee?: TestType(name='ee'),
}

model SimpleStruct {
  aa?: string(name='aa', description='a'),
  bb?: float(name='bb', description='b'),
}

model TestType {
  a?: float(name='a', description='aa'),
  b?: [ 
    {
      c?: string(name='c', description='c'),
    }
  ](name='b', description='b'),
}

model MyModel = {
  // keyword property
  delete: string(name='Delete'),
  stringfield: string,
  bytesfield: bytes,
  stringarrayfield: [ string ],
  mapfield: map[string]string,
  name: string(name='realName'),
  submodel: {
    stringfield: string,
  },
  submodelMap: map[string]MyModel.submodel,
  mapModel: map[string]M,
  subarraymodel: [ {} ],
  subarray: [ M ],
  maparray: [ map[string]any ],
  moduleModelMap: map[string]Source.Request,
  subModelMap: map[string]M.subM,
  modelMap: map[string]M,
  moduleMap: map[string]Source,
  object: object,
  readable: readable,
  writable: writable,
  existModel: M,
  request: $Request,
  complexList: [ [ string ] ],
  complexMap: [ map[string]MyModel.submodel ],
  numberfield: number,
  integerField: integer,
  floatField: float,
  doubleField: double,
  longField: long,
  ulongField: ulong,
  int8Field: int8,
  int16Field: int16,
  int32Field: int32,
  int64Field: int64,
  uint8Field: uint8,
  uint16Field: uint16,
  uint32Field: uint32,
  uint64Field: uint64,
  numberPattern?: int64(name='pattern', default=50, description='pattern', example=10, format='int64', maximum=100, minimum=0, pattern='[0-9]{1,3}'),
};
