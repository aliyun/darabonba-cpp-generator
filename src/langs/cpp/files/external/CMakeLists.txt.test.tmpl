find_package(${package_name} ${${package_name}_MINIMUM_REQUIRED} QUIET COMPONENTS ${${package_name}_COMPONENTS_REQUIRED})

if(${package_name}_FOUND)
  message(STATUS "Found ${package_name} version ${${package_name}_VERSION}")
else()
  message(STATUS "${package_name} could not be located, Building ${package_name} instead.")
  include(FetchContent)

  FetchContent_Declare(
    _${package_name}
    GIT_REPOSITORY ${git_link}
    GIT_TAG ${git_tag}
    CMAKE_ARGS
      -DENABLE_UNIT_TESTS:BOOL="0")
  
  FetchContent_GetProperties(_${package_name})
  if(NOT _${package_name}_POPULATED)
    FetchContent_Populate(_${package_name})
    message(STATUS "Added ${package_name} source : ${_${package_name}_SOURCE_DIR}")
    message(STATUS "Added ${package_name} binary : ${_${package_name}_BINARY_DIR}")
    add_subdirectory(
      ${_${package_name}_SOURCE_DIR} 
      ${_${package_name}_BINARY_DIR}
    )
  endif()
  target_include_directories(${project_name} PRIVATE "${_${package_name}_SOURCE_DIR}/include")
  if(ENABLE_UNIT_TESTS)
    target_include_directories(tests_${project_name} PRIVATE "${_${package_name}_SOURCE_DIR}/include")
  endif()
endif()
